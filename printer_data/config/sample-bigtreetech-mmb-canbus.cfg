# This file contains common pin mappings for the BIGTREETECH MMBCan
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "MMB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

# This file contains common pin mappings for the Fysetc ERB 2.0.
# It is based on the Primitive_Infinite_Spool_System.cfg from
# https://github.com/Esoterical/PrinterMods/blob/0150ef6d1fd3dacb8d310fb353080492e14ecfbf/Primitive%20Infinite%20Spool%20System/Config/Primitive_Infinite_Spool_System.cfg

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths / IDs                      [mcu] section
## Toolhead entry sensor pin            [filament_switch_sensor pre_extruder] section
## Toolhead sensor pin                  [filament_switch_sensor post_extruder] section
## Belay Klippy module                  Install according to https://github.com/Annex-Engineering/Belay/blob/main/docs/Quick_Start.md#klippy-module

[mcu nightturtle]
canbus_uuid: 9dc49936c7ce

[force_move]
enable_force_move: True

[board_pins nightturtle]
mcu: nightturtle
aliases:
    MCU_MOT0_UART=PA10,
    MCU_MOT0_STEP=PB15,
    MCU_MOT0_DIR=PB14,
    MCU_MOT0_ENABLE=PA8,
    MCU_MOT0_DIAG=PA3,
    MCU_MOT1_UART=PC7,
    MCU_MOT1_STEP=PD2,
    MCU_MOT1_DIR=PB13,
    MCU_MOT1_ENABLE=PA15,
    MCU_MOT1_DIAG=PA4,
    
    MCU_ENDSTOP_1=PA3,
    MCU_ENDSTOP_2=PA4,
    MCU_ENDSTOP_3=PB9,
    MCU_ENDSTOP_4=PB8,
    MCU_ENDSTOP_5=PC15,
    MCU_ENDSTOP_6=PC13,
    MCU_ENDSTOP_7=PC14,
    MCU_ENDSTOP_8=PB12,
    MCU_ENDSTOP_9=PB11,
    MCU_ENDSTOP_10=PB10,
    MCU_ENDSTOP_11=PB2,

[extruder_stepper left_filament_stepper]
extruder:
step_pin: nightturtle:MCU_MOT1_STEP
dir_pin: nightturtle:MCU_MOT1_DIR
enable_pin: !nightturtle:MCU_MOT1_ENABLE 
full_steps_per_rotation: 200
microsteps: 16
rotation_distance: 22.6789511
gear_ratio: 50:10

[tmc2209 extruder_stepper left_filament_stepper]
uart_pin: nightturtle:MCU_MOT1_UART
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0
interpolate: True

[extruder_stepper right_filament_stepper]
extruder: 
step_pin: nightturtle:MCU_MOT0_STEP
dir_pin: !nightturtle:MCU_MOT0_DIR
enable_pin: !nightturtle:MCU_MOT0_ENABLE
full_steps_per_rotation: 200
microsteps: 16
rotation_distance: 22.6789511
gear_ratio: 50:10

[tmc2209 extruder_stepper right_filament_stepper]
uart_pin: nightturtle:MCU_MOT0_UART
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0
interpolate: True

[filament_switch_sensor left_pre_stepper]
switch_pin: ^nightturtle:MCU_ENDSTOP_4
pause_on_runout: False
insert_gcode:
  {% set OriginalState = printer.print_stats.state %}
  {% if not (OriginalState == "paused" or OriginalState == "printing") %}
    RESPOND MSG="Left filament inserted"
    {% for step in range(50) %}
      M400 # Wait for buffer to clear
      _PRELOAD_FILAMENT SIDE=LEFT
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=-10 VELOCITY=20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %}
      ACTIVATE_LEFT_SPOOL
    {% endif %}
  {% endif %}
runout_gcode:
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    {% set CURRENT_TEMP = printer['extruder'].target %} 
    {% set OriginalState = printer.print_stats.state %}
    {% if OriginalState == "printing" and  printer['filament_switch_sensor left_post_stepper'].filament_detected and not  printer['filament_switch_sensor right_post_stepper'].filament_detected %}
      RESPOND MSG="Left Pre-Stepper Sensor detected runout. Disabling SFS"
      G92 E0
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}

[filament_switch_sensor left_post_stepper]
switch_pin: ^nightturtle:MCU_ENDSTOP_1
pause_on_runout: False

[filament_switch_sensor right_pre_stepper]
switch_pin: ^nightturtle:MCU_ENDSTOP_3
pause_on_runout: False
insert_gcode:
  {% set OriginalState = printer.print_stats.state %}
  {% if not (OriginalState == "paused" or OriginalState == "printing") %}
    RESPOND MSG="Right filament inserted"
    {% for step in range(50) %}
      M400 # Wait for buffer to clear
      _PRELOAD_FILAMENT SIDE=RIGHT
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=-10 VELOCITY=20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %}
      ACTIVATE_RIGHT_SPOOL
    {% endif %}
  {% endif %}
runout_gcode:
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    {% set CURRENT_TEMP = printer['extruder'].target %} 
    {% set OriginalState = printer.print_stats.state %}
    {% if OriginalState == "printing" and  printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
      RESPOND MSG="Right Pre-Stepper Sensor detected runout. Disabling SFS"
      G92 E0
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}

[filament_switch_sensor right_post_stepper]
switch_pin: ^nightturtle:MCU_ENDSTOP_2
pause_on_runout: False

[belay joint_belay]
extruder_type:extruder_stepper
extruder_stepper_name: left_filament_stepper
sensor_pin: ^!nightturtle:MCU_ENDSTOP_5
multiplier_high: 1.05
multiplier_low: 0.95
debug_level: 1

[filament_switch_sensor pre_extruder]
switch_pin: nhk:gpio13
pause_on_runout: False
runout_gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  {% set CURRENT_TEMP = printer['extruder'].target %} 
  {% set OriginalState = printer.print_stats.state %}

  {% if OriginalState == "printing" %}
    PAUSE
    {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
      #T0 # Swap to left spool
      GO_TO_PURGE
      {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
        RESPOND MSG="Changing to Right"
        ACTIVATE_RIGHT_SPOOL
      {% elif printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}  
        RESPOND MSG="Changing to Left"
        ACTIVATE_LEFT_SPOOL
      {% endif %}
      INFSPOOL_LOAD_FILAMENT
      G4 P2000
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      RESUME
    {% else %}
      RESPOND TYPE=error msg="!! FILAMENT RUNOUT !!"
    {% endif %}
  {% endif %}

[filament_switch_sensor post_extruder]
switch_pin: nhk:gpio3
pause_on_runout: False

[gcode_macro _FILAMENT_VARS]
variable_activespool: None
variable_count: 0
variable_jam_retry: 0
variable_infinitespool: 0
variable_bowden_length: 1270
gcode: # Gcode section left intentionally blank. Do not disturb.

[gcode_macro TOGGLE_INFINITE_SPOOL_MODE]
gcode:
  {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=0
    RESPOND MSG="Infinite Spool mode disabled"
  {% else %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=1
    RESPOND MSG="Infinite Spool mode enabled"
  {% endif %}

# Macros
# The filament movement macros have multiple parts, a Main macro that you call which has a loop in it.
# In this loop it will call a secondary macro that does the sensor check and small G1 movement.
# This is because checking a sensor/whatever is done *once* at the activation of a macro
# therefore you can't keep checking a sensor from within a loop in the same macro, but if you
# are calling a *second* macro from the loop, then this second macro will check the sensor each time
# it activates. The loop also has a fixed number of iterations so once the second macro has detected
# its desired state it stops doing anything and the main loop just "runs out" of iterations as I can't
# find a way for the second macro to influence the first macro to cancel a loop early.
#
# The process isn't perfect (due to klipper command queueing and stuff) so you need to have "wiggle" room
# to allow for timing variations between "triggered" and action. But with enough phyisical space for the 
# filament to move after triggering and using small movement motions each time it works well enough.
# 
# At the end of each loop/macro pair there is a call to a third "check" macro which does a final check
# of the sensor just to make sure the loop terminated properly and didn't just "run out" of loop iterations
# without actually completing (ie. if filament gets jammed or the bowden comes loose).

[gcode_macro SELECT_ACTIVE_SPOOL]
# Automatically selects the spool stepper and belay based on which side has filament at the "post feed stepper" switch
# I have this as a delayed_gcode to run each time Klipper starts, and also in my start_print gcode just to double check.
# Also worth
gcode:
  {% if printer['filament_switch_sensor left_post_stepper'].filament_detected and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT SPOOL, BOTH SENSORS TRIGGERED !!"
    #M112 #Emergency Stop
  {% elif printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    ACTIVATE_LEFT_SPOOL
  {% elif printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    ACTIVATE_RIGHT_SPOOL
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
    #M112 #Emergency Stop
  {% endif %}

[gcode_macro ACTIVATE_LEFT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=extruder 
  BELAY_SET_STEPPER belay=joint_belay stepper=left_filament_stepper
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'left'"
  RESPOND MSG="Left Spool Activated"

[gcode_macro ACTIVATE_RIGHT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=extruder 
  BELAY_SET_STEPPER belay=joint_belay stepper=right_filament_stepper
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'right'"
  RESPOND MSG="Right Spool Activated"

[delayed_gcode INITIAL_ACTIVE_SPOOL] # This will set the current active spool (if filament is in the correct configuration) on boot/restart of Klpper
initial_duration: 1
gcode:
   SELECT_ACTIVE_SPOOL

[gcode_macro HARD_CHECK_FILAMENT_LOADED]
# A hard check to make sure you have filament at the extruder. I have this in my START_PRINT after the LOAD_FILAMENT
# macro as a final check and it E-STOP's out if filament isn't detected.
gcode:
	{% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
		RESPOND TYPE=error msg="!! Filament not at extruder. Run ACTIVATE_side_SPOOL before starting print !!"
		CANCEL_PRINT
        M400
	{% endif %}

[gcode_macro REMOVE_FILAMENT] #Removes filament from system, automatic, based on current active spool
gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  SET_VELOCITY_LIMIT ACCEL=50
  M83
  {% if printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E-200 F1000
    G1 E-1050 F6000
    M400
  {% endif %}
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    RESPOND MSG="Removing filament from LEFT side..."
    #{% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    #SET_VELOCITY_LIMIT ACCEL=500
    LFS_DISABLE
   # M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # wait for buffer to clear
        #_REMOVE_LEFT_FILAMENT
        _REMOVING_FILAMENT SIDE=LEFT
    {% endfor %}
    #SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    #_REMOVE_LEFT_FILAMENT_CHECK
    _REMOVING_FILAMENT_CHECK SIDE=LEFT
    LFS_ENABLE
  
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RESPOND MSG="Removing filament from RIGHT side..."
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    #SET_VELOCITY_LIMIT ACCEL=500
    RFS_DISABLE
    #M83
    #G4 P3000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400
       # _REMOVE_RIGHT_FILAMENT
        _REMOVING_FILAMENT SIDE=RIGHT
    {% endfor %}
    #SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    #_REMOVE_RIGHT_FILAMENT_CHECK
    _REMOVING_FILAMENT SIDE=RIGHT
    RFS_ENABLE

  {% else %}
    RESPOND TYPE=error msg="!! NO SPOOL ACTIVE !!"
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}

[gcode_macro _REMOVING_FILAMENT_CHECK] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH LEFT SIDE FILAMENT REMOVAL !!"
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH RIGHT SIDE FILAMENT REMOVAL !!"
  {% else %}
    RESPOND MSG="FIlament Removed"
  {% endif %}

[gcode_macro _REMOVING_FILAMENT] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    G1 E-10 F6000 
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E-10 F6000 
  {% endif %}

[gcode_macro _PRELOAD_FILAMENT]
gcode:
  {% if params.SIDE == 'LEFT' and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=5 VELOCITY=20
  {% elif params.SIDE == 'RIGHT' and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=5 VELOCITY=20
  {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
  #{% set TOTAL_DISTANCE 0 | int %}
  #SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE={TOTAL_DISTANCE}
  {% if printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND MSG="Filament Already Loaded"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Loading Filament"
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
    M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _LOADING_FILAMENT
        #_COUNT_LOADING_FILAMENT
    {% endfor %}
    #_READ_TOTAL_DISTANCE
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    _LOADING_FILAMENT_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  

[gcode_macro _LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E300 F1500
    G1 E950 F6000
    #G4 P2000
  {% elif not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F6000             # extrude 10mm
    #G4 P100 #wait 200ms
  {% endif %}
  
[gcode_macro _LOADING_FILAMENT_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
    # M112
  {% else %}
    RESPOND MSG="Filament detected at extruder, doing final push to tip" 
    G1 E25 F300
    RESPOND MSG="Filament Loaded" 
  {% endif %}

[gcode_macro MEASURE_BOWDEN]
gcode:
  #{% set TOTAL_DISTANCE 0 | int %}
  #SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE={TOTAL_DISTANCE}
  {% if  printer["gcode_macro _FILAMENT_VARS"].activespool == None %}
    RESPOND MSG="No spool active. Activate a spool first"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Removing Filament to starting location"
    REMOVE_FILAMENT
    RESPOND MSG="Starting Measurement"
    
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_length VALUE=0
    M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _MEASURING_BOWDEN
        #_COUNT_LOADING_FILAMENT
    {% endfor %}
    #_READ_TOTAL_DISTANCE
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    _MEASURING_BOWDEN_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}


[gcode_macro _MEASURING_BOWDEN]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F1800             # extrude 10mm
    {% set MEASUREMENT = printer["gcode_macro _FILAMENT_VARS"].bowden_length + 10 %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_length VALUE={MEASUREMENT}
    #G4 P100 #wait 200ms
  {% endif %}
  
[gcode_macro _MEASURING_BOWDEN_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
    # M112
  {% else %}
    RESPOND MSG="Bowden length is "{printer["gcode_macro _FILAMENT_VARS"].bowden_length}
  {% endif %}
  
[gcode_macro INFSPOOL_LOAD_FILAMENT]
gcode:
  {% if printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND MSG="Filament Already Loaded"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Loading Filament"
    GO_TO_PURGE
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
    M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _INFSPOOL_LOADING_FILAMENT
    {% endfor %}
    _INFSPOOL_LOADING_FILAMENT_PURGE
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  
[gcode_macro _INFSPOOL_LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor pre_extruder'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E270 F1000
    G1 E1000 F6000
    #G4 P2000
  {% elif not printer['filament_switch_sensor pre_extruder'].filament_detected %}
    G1 E10 F6000             # extrude 10mm
    #G4 P100 #wait 200ms
  {% endif %}

[gcode_macro _INFSPOOL_LOADING_FILAMENT_PURGE]
gcode:
  {% if not printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
    # M112
  {% else %}
    RESPOND MSG="Filament detected at pre-extruder, pushing to post-extruder"
    M83
    G1 E120 F300
    NOZZLE_PARK
  {% endif %}


[gcode_macro LFS_ENABLE] ; Add this to PRINT_START
description: Enable Left Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=left_pre_stepper ENABLE=1

[gcode_macro LFS_DISABLE] ; Add this to PRINT_START
description: Disable Left Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=left_pre_stepper ENABLE=0
  
[gcode_macro RFS_ENABLE] ; Add this to PRINT_START
description: Enable Right Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=right_pre_stepper ENABLE=1

[gcode_macro RFS_DISABLE] ; Add this to PRINT_START
description: Disable Right Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=right_pre_stepper ENABLE=0

[gcode_macro ENABLE_RUNOUT_SENSOR]
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    LFS_ENABLE
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RFS_ENABLE
  {% else %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT ACTIVE SPOOL, NO RUNOUT SENSOR ENABLED !!"
  {% endif %}

[gcode_macro DISABLE_RUNOUT_SENSOR]
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    LFS_DISABLE
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RFS_DISABLE
  {% else %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT ACTIVE SPOOL, NO RUNOUT SENSOR ENABLED !!"
  {% endif %}

[gcode_macro T0] #Left Spool
gcode:
  #{% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
    RESPOND MSG="T0 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T0"
    REMOVE_FILAMENT
    ACTIVATE_LEFT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}

[gcode_macro T1] #Right Spool
gcode:
  #{% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}
    RESPOND MSG="T1 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T1"
    REMOVE_FILAMENT
    ACTIVATE_RIGHT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}
